---

- name: Configure developer user as cluster admin
  shell: |
    oc login -u system:admin
    oc adm policy add-cluster-role-to-user cluster-admin "{{ user }}"

- include_tasks: sync_apbs.yml
  when: preload 

- name: Install apb tool
  yum:
   name: apb
  state: present

- name: install virtctl
  get_url:
   url: "https://github.com/kubevirt/kubevirt/releases/download/v{{ version }}/virtctl-v{{ version }}-linux-amd64"
   dest: /usr/bin/virtctl
   mode: 0700

- name: Check if kubevirt was already provisioned
  shell: "oc get serviceinstance -l task=kubevirt -n kube-system -o jsonpath='{ range .items[*]}{.status.conditions}' | grep successfull"
  register: kubevirt_service_instance
  ignore_errors: yes

- name: Log in as the developer user
  command: oc login --username {{ user }} --password {{ password }}

- name: Relist apbs
  command: apb relist

- name: Gather apb to use for kubevirt
  shell: "apb list | grep virtualization | awk -F' ' '{print $2}'"
  register: kubevirt_apb_command

- name: Establish kubevirt apb name
  set_fact:
   kubevirt_apb: "{{ kubevirt_apb_command.stdout }}"

- name: Debug kubevirt apb name
  debug:
   msg: "kubevirt_apb has value {{ kubevirt_apb }}"

- name: Check kubevirt apb is there
  assert:
   that:
    - "kubevirt_apb != ''"
   msg: "no kubevirt apb was found"

- name: Render kubevirt service instance
  template:
   src: "kubevirt.yml.j2"
   dest: /tmp/kubevirt.yml
  when: kubevirt_service_instance.rc != 0

- name: Deploy kubevirt service instance
  command: oc create -f /tmp/kubevirt.yml
  when: kubevirt_service_instance.rc != 0

- name: Verify that kubevirt is running
  shell: "oc get pods --field-selector=status.phase==Running -o name -n kube-system | grep virt-controller"
  args:
    warn: no
  register: kubevirt
  until: kubevirt.rc == 0
  retries: 60
  delay: 10
  changed_when: false

- name: Verify that cdi is running
  shell: "oc get pods --field-selector=status.phase==Running -o name -n golden-images | grep cdi-deployment"
  args:
    warn: no
  register: cdi
  until: cdi.rc == 0
  retries: 60
  delay: 10
  changed_when: false
  when: plan == 'gluster'

- name: Render vm templates
  template:
   src: "{{ item }}-template.yml.j2"
   dest: "/tmp/vmtemplate-{{item}}.yml"
  with_items:
   - linux
   - windows

- name: Deploy vm template in openshift namespace
  command: "oc apply -f /tmp/vmtemplate-{{ item }}.yml -n openshift"
  with_items:
   - linux
   - windows

- include_tasks: import_vm.yml
